1. The observability stack has been deployed to namespace: {{ .Values.global.namespace }}

{{- if .Values.grafana.enabled }}
2. Grafana Dashboard:
   - Dashboard ConfigMap: {{ .Values.grafana.dashboard.name }}
   - Access your Grafana instance to view the MediSupply dashboard
{{- end }}

{{- if .Values.prometheus.enabled }}
3. Prometheus Configuration:
   - Scraping services in namespace: {{ .Values.global.medisupplyNamespace }}
   - Services monitored: {{ range .Values.prometheus.config.services }}{{ .name }} {{ end }}
{{- end }}

{{- if .Values.jaeger.enabled }}
4. Jaeger Tracing:
   - Tracing enabled for namespace: {{ .Values.global.medisupplyNamespace }}
   - Provider: {{ .Values.jaeger.provider.name }}
{{- end }}

{{- if .Values.kiali.enabled }}
5. Kiali Configuration:
   - Service mesh observability configured
   - Authentication: {{ .Values.kiali.auth.strategy }}
{{- end }}

{{- if .Values.serviceMonitor.enabled }}
6. ServiceMonitor Resources:
   - Created for Prometheus Operator integration
   - Ensure Prometheus Operator is installed and configured
{{- else }}
6. Prometheus ConfigMap:
   - Using ConfigMap-based configuration
   - To use ServiceMonitor, set serviceMonitor.enabled=true
{{- end }}

To verify the installation:
  kubectl get configmaps -n {{ .Values.global.namespace }} -l app.kubernetes.io/name={{ include "observability.name" . }}
  kubectl get telemetry -n {{ .Values.global.medisupplyNamespace }}
{{- if .Values.serviceMonitor.enabled }}
  kubectl get servicemonitor -n {{ .Values.global.medisupplyNamespace }}
{{- end }}
replicaCount: 2 # Can now scale with consumer groups

image:
  repository: python
  tag: "3.11-slim"
  pullPolicy: IfNotPresent

# Kafka configuration
kafka:
  bootstrapServers: "kafka:9092"

# RabbitMQ configuration
rabbitmq:
  host: "rabbitmq.mediorder.svc.cluster.local"
  port: 5672
  username: "user"
  # Password will be read from Kubernetes secret
  # Note: Secret must exist in the same namespace (medisupply) or be copied from mediorder namespace
  secretName: "rabbitmq"
  secretKey: "rabbitmq-password"
  vhost: "/"

# Consumer groups
consumerGroup:
  kafkaToRabbitmq: "kafka-rabbitmq-replicator-k2r-v2"
  rabbitmqToKafka: "kafka-rabbitmq-replicator-r2k-v2"

# Consumer configuration for low latency
consumer:
  # Process all available messages (earliest) or only new ones (latest)
  autoOffsetReset: "earliest"  # Change to "latest" if you only want new messages

# Replication configuration
replication:
  kafkaToRabbitmq:
    enabled: true
    mappings:
      - kafkaTopic: "events-order-damage"
        rabbitmqQueue: "order-damage-queue"
        rabbitmqExchange: "events"
        rabbitmqRoutingKey: "order.damage"
      - kafkaTopic: "events-sensor"
        rabbitmqQueue: "sensor-queue"
        rabbitmqExchange: "events"
        rabbitmqRoutingKey: "sensor.data"

  rabbitmqToKafka:
    enabled: false
    mappings: []
    #  - rabbitmqQueue: "warehouse-events"
    #    kafkaTopic: "warehouse-events"
    #  - rabbitmqQueue: "notifications"
    #    kafkaTopic: "notifications"

resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 100m
    memory: 128Mi

nodeSelector: {}
tolerations: []
affinity: {}

# Logging configuration
logging:
  level: INFO

# Health check configuration
healthCheck:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds: 10

# Istio configuration
istio:
  enabled: true
  labels:
    app: kafka-rabbitmq-replicator
    version: v1
